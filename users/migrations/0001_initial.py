# Generated by Django 5.1.7 on 2025-03-13 10:13

import django.core.validators
import users.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "created_time",
                    models.DateTimeField(
                        auto_now_add=True, verbose_name="Created Time"
                    ),
                ),
                (
                    "updated_time",
                    models.DateTimeField(auto_now=True, verbose_name="Updated Time"),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        max_length=64,
                        null=True,
                        unique=True,
                        verbose_name="username",
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that phone already exists."
                        },
                        max_length=12,
                        unique=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                code="WRONG_PHONE_NUMBER",
                                message="Phone number must begin with 998 and contain only 12 numbers",
                                regex="^998\\d{9}$",
                            )
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("admin", "Admin"),
                            ("stadium_owner", "Stadium Owner"),
                            ("customer", "Customer"),
                        ],
                        default="customer",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        choices=[
                            ("uz", "O'zbek"),
                            ("ru", "Русский"),
                            ("en", "English"),
                        ],
                        default="uz",
                        max_length=20,
                        verbose_name="Language",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        max_length=254,
                        null=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "unique_together": {("phone", "role")},
            },
            managers=[
                ("objects", users.manager.CustomUserManager()),
            ],
        ),
    ]
